import src.function as f
import numpy as np
from sklearn.neighbors import KNeighborsClassifier

debuglogger = print



class CrystalOperationsNum1:
    def __init__(self, crys):
        self.crys = crys

    def add_cell(self):                   # 控制原子个数最多为120
        return self.crys*3

    def cut_exf_layer(self):
        crys = self.add_cell()           # return layer object
        atomic_numbers = crys.get_atomic_numbers()
        atomic_numbers_lst = atomic_numbers.tolist()        # 得到crys对象中各原子原子序数列
        unit_nvector = [0, 0, 1]
        f_pos = crys.get_positions()
        cell_atom_numbers = len(f_pos)
        dis_lst = [0]
        for num in range(cell_atom_numbers):
            vector = crys.get_distance(0, num, mic=False, vector=True)
            dis = unit_nvector @ vector
            if abs(dis) > 0.0001:         # 排除同一层计算误差
                dis_lst.append(dis)                # 列表嵌套,代表元素与第一个元素的距离
        dis_lst.sort()
        layer_dis_lst = []
        for s in range(len(dis_lst)-1):
            layer_dis = dis_lst[s+1] - dis_lst[s]
            if layer_dis > 0.001:  # 排除计算带来的误差，原子层间距离不可能到0.001埃量级
                layer_dis_lst.append(layer_dis)
        # 机器学习训练集的构建
        layer_dis_lst.sort()
        s = []
        s.append(layer_dis_lst[-1])     # 最大层间距
        number = len(crys.get_positions())
        min_length = 10000000
        for num in range(1, number):
            dis = crys.get_distance(0, num, mic=False, vector=False)
            if min_length > dis:
                min_length = dis
        s.append(min_length)       # s[最大层间距， 最小原子间距离]
        return [s[0]/s[1], s[0]]

    def test(self, max_rate_min):
        knn = KNeighborsClassifier(n_neighbors=2)
        train_set = [[0.75000000003169454, 2.1531405000909905], [0.54930175768613132, 1.3284594369538425],
                     [0.31206606628699868, 0.4575788398285372], [0.38648126218017059, 0.95671943647308311],
                     [0.55367672766289833, 1.3573000000000022], [1.2425695187984569, 3.0799998863026969],
                     [0.88888888485196527, 3.8705564268661607], [1.0000000000000002, 2.6751160000000009],
                     [1.5000591953915039, 2.3248506400000011], [0.66870171715163762, 2.1772500000000008],
                     [0.6143545395628911, 1.8768154500000005], [0.42951711706940976, 1.4391000636591758],
                     [0.3976748255998182, 1.2144849999999998], [0.806682577565624, 2.5551074978714725],
                     [0.57735026918962584, 1.9195000000000002], [0.69534602501450815, 2.0369999999999999],
                     [0.6000000000299196, 1.4504527500612951], [0.65465348366396436, 2.1610000000000005],
                     [0.42087452263109015, 1.4392496208325554], [0.4100465990464715, 1.2983099023669942],
                     [0.68919811688229726, 1.9790000000000001], [0.37500000001584732, 1.2756296250539076],
                     [0.57735026918962584, 1.7213845000000001], [0.37500000001584732, 1.506933000063682],
                     [0.37500000001584738, 1.5697770000663382], [1.6943649347289691, 6.0997137650242887],
                     [2.254869263952227, 3.2061180729431022], [1.2377971903789327, 2.9894346000000027],
                     [1.2539904044953434, 3.0765296237699928], [2.850831087358066, 4.1338978600000011],
                     [0.65465367071785774, 1.4743177500623039], [0.78770143343718435, 1.8550944000000005],
                     [0.94162654580573157, 3.3898555649006337], [0.88888888485196527, 2.9329395422354958],
                     [0.70590825071480079, 1.6395753081093609], [0.28237395380757779, 0.85676855166450849],
                     [0.88888888485196527, 4.1777777588042362], [1.0, 2.9860000000000002],
                     [0.89003112057516665, 3.175311517039908], [1.1489683234662855, 2.9500000000000011],
                     [1.1493537009223069, 3.0803256000000001], [1.3641707422189535, 2.8722959255409748],
                     [1.1527856996195007, 2.8471198799999997], [1.1320338604265516, 2.814665564000002],
                     [1.2451891776108879, 3.3816112000000018], [1.1715380017456367, 2.8475000000000001],
                     [1.1522903756970355, 2.9434393600000002], [0.56694670952239767, 1.5305325000646794],
                     [0.57735026918962584, 1.7598000000000003], [0.50015001500149958, 1.478629123057968],
                     [1.1371433087563603, 2.8180800000000019], [1.2425885487838135, 3.1389120000000013],
                     [1.1579413593308081, 3.0920000000000005],
                     # 新加13个二维材料
                     [2.2548681518731568, 3.2061180750000009],
                     [1.1614365166749336, 3.0318749999999994], [1.1537391237188268, 2.8223120000000002],
                     [1.3265206577579143, 3.0999999999999996], [1.2857142857142863, 2.8692000000000011],
                     [1.2947947453989455, 3.2250000000000014], [1.1191802854456956, 2.9033131999999995],
                     [1.1493537009223069, 3.0803256000000001],
                     [1.240052513250911, 3.0250000000000039],
                     [1.2005680670256706, 3.2630000000000017],
                     [1.3673407035629246, 3.1270747999999999], [1.2414222422541537, 3.0670000000000002],
                     [1.1340068277269548, 2.9249999999999994]]

        x_array = np.array(train_set)
        y = [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]

        y_array = np.array(y)
        knn.fit(x_array, y_array)
        prediction = knn.predict(max_rate_min)
        return prediction



if __name__ == '__main__':
    dir_path = r"C:\Users\wang1\Desktop\replace"
    # dir_path = 'C:/Users/wang1/Desktop/train_set'

    objs = f.FileOperations(dir_path)  # 创建FileOperations类
    objs = objs.read_files()  # 打开dir_path， 返回创建的 atoms对象列表
    train_set = []
    y = []
    num = 0
    error = 0
    for cry_obj in objs:
        try:
            a = CrystalOperationsNum1(cry_obj) # 创一个对象
            train_set.append(a.cut_exf_layer())  # 返回layer_object
            predicton = a.test(np.array([a.cut_exf_layer()]))
            y.append(predicton.tolist()[0])
            num += 1
        except Exception as e:
            print(e)
            error += 1
    print('train_set = ', train_set)
    print("y = ", y)
    print("file_num = ", num, "error num =", error)
